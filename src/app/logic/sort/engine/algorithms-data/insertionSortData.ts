'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { insertionSortGenerator } from '../algorithms'

export const insertionSortData: SortAlgorithm = {
  id: 'insertionSort',
  name: 'Insertion Sort',
  description:
    "Much like sorting a hand of playing cards, Insertion Sort builds the final sorted array one item at a time. It takes each element from the input and inserts it into the correct position within the already sorted portion of the array. It\'s simple to implement and efficient for small datasets or nearly sorted data, as it only requires shifting elements to make space for the new insertion.",
  generator: insertionSortGenerator,
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'Fundamental/Early' },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure insertionSort(list, direction)',
      '  n = length of list',
      '  if n <= 1 then return list',
      '',
      '  for i = 1 to n - 1',
      '    key = list[i]',
      '    j = i - 1',
      '    while j >= 0 and ((direction == ASC and list[j] > key) or (direction == DESC and list[j] < key))',
      '      list[j + 1] = list[j]',
      '      j = j - 1',
      '    end while',
      '    list[j + 1] = key',
      '  end for',
      '  return list',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '',
      'typedef enum { ASC, DESC } SortDirection;',
      '',
      'void insertionSort(int arr[], int n, SortDirection direction) {',
      '  if (n <= 1) return;',
      '  int i, key, j;',
      '  for (i = 1; i < n; i++) {',
      '    key = arr[i];',
      '    j = i - 1;',
      '    bool should_move;',
      '    while (j >= 0) {',
      '      if (direction == ASC) {',
      '        should_move = arr[j] > key;',
      '      } else { ',
      '        should_move = arr[j] < key;',
      '      }',
      '      if (!should_move) {',
      '        break;',
      '      }',
      '      arr[j + 1] = arr[j];',
      '      j = j - 1;',
      '    }',
      '    arr[j + 1] = key;',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <algorithm>',
      '',
      'enum class SortDirection { ASC, DESC };',
      '',
      'void insertionSort(std::vector<int>& arr, SortDirection direction) {',
      '  int n = arr.size();',
      '  if (n <= 1) return;',
      '  int i, key, j;',
      '  for (i = 1; i < n; i++) {',
      '    key = arr[i];',
      '    j = i - 1;',
      '    bool should_move;',
      '    while (j >= 0) {',
      '      if (direction == SortDirection::ASC) {',
      '        should_move = arr[j] > key;',
      '      } else { ',
      '        should_move = arr[j] < key;',
      '      }',
      '      if (!should_move) {',
      '        break;',
      '      }',
      '      arr[j + 1] = arr[j];',
      '      j = j - 1;',
      '    }',
      '    arr[j + 1] = key;',
      '  }',
      '}',
    ],
    python: [
      'def insertion_sort(arr, direction="asc"):',
      '  n = len(arr)',
      '  if n <= 1:',
      '    return arr',
      '  for i in range(1, n):',
      '    key = arr[i]',
      '    j = i - 1',
      '    should_move = False',
      '    while j >= 0:',
      '      if direction == "asc":',
      '        should_move = arr[j] > key',
      '      else:  ',
      '        should_move = arr[j] < key',
      '      ',
      '      if not should_move:',
      '        break',
      '      arr[j + 1] = arr[j]',
      '      j -= 1',
      '    arr[j + 1] = key',
      '  return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [4], cpp: [5], python: [0] },
    1: { c: [4], cpp: [6], python: [1] },
    2: { c: [5], cpp: [7], python: [2, 3] },
    4: { c: [7], cpp: [9], python: [4] },
    5: { c: [8], cpp: [10], python: [5] },
    6: { c: [9], cpp: [11], python: [6] },
    7: {
      c: [11, 12, 13, 14, 15, 17],
      cpp: [13, 14, 15, 16, 17, 19],
      python: [8, 9, 10, 11, 12, 14],
    },
    8: { c: [20], cpp: [22], python: [16] },
    9: { c: [21], cpp: [23], python: [17] },
    10: { c: [22], cpp: [24], python: [18] },
    11: { c: [23], cpp: [25], python: [19] },
    12: { c: [24], cpp: [26], python: [20] },
    13: { python: [21] },
    14: { c: [25], cpp: [27], python: [21] },
  },
  hasAdvancedAuxiliaryVisuals: false,
}
