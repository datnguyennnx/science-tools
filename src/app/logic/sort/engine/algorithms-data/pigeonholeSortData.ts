'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { pigeonholeSortGenerator } from '../algorithms'

export const pigeonholeSortData: SortAlgorithm = {
  id: 'pigeonholeSort',
  name: 'Pigeonhole Sort',
  description:
    'Pigeonhole Sort is a sorting algorithm that is effective when the number of items and the range of possible key values are approximately the same. It works by creating an array of "pigeonholes," one for each key value in the range. The input elements are then placed into the corresponding pigeonholes. Finally, the sorted list is obtained by collecting the elements from the pigeonholes in order. It is similar to Counting Sort but directly places elements into the auxiliary array rather than just counting them.',
  generator: pigeonholeSortGenerator,
  complexity: {
    time: { best: 'O(n + N)', average: 'O(n + N)', worst: 'O(n + N)' },
    space: 'O(n + N)', // N is the range of key values, n is number of elements
  },
  origin: { name: 'E. J. Isaac & R. C. Singleton', year: 1956 },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure pigeonholeSort(list)',
      '  minVal = findMinValue(list)',
      '  maxVal = findMaxValue(list)',
      '  rangeSize = maxVal - minVal + 1',
      '',
      '  pigeonholes = array of rangeSize empty lists',
      '',
      '  for each element in list',
      '    add element to pigeonholes[element - minVal]',
      '  end for',
      '',
      '  index = 0',
      '  // For ascending sort, iterate from 0 to rangeSize - 1',
      '  // For descending sort, iterate from rangeSize - 1 down to 0',
      '  for i = 0 to rangeSize - 1 // Defaulting to ascending sort logic',
      '    for each element in pigeonholes[i]',
      '      list[index] = element',
      '      index = index + 1',
      '    end for',
      '  end for',
      'end procedure',
    ],
    c: [
      '// Requires dynamic arrays (like linked lists) for pigeonholes.',
      '// This C code is conceptual for fixed-size arrays if max occurrences are known,',
      '// or assumes helper functions for dynamic list management per hole.',
      'void pigeonholeSort(int arr[], int n) {',
      '  if (n == 0) return;',
      '  int minVal = arr[0], maxVal = arr[0];',
      '  for (int i = 1; i < n; i++) {',
      '    if (arr[i] < minVal) minVal = arr[i];',
      '    if (arr[i] > maxVal) maxVal = arr[i];',
      '  }',
      '  int rangeSize = maxVal - minVal + 1;',
      '',
      '  // Conceptual: Each hole is a list/vector. For C, this is complex.',
      '  // Using a 2D array where rows are holes, columns store elements.',
      '  // Max size `n` for each hole is worst-case (all elements same).',
      '  int holes[rangeSize][n];',
      '  int holeCounts[rangeSize];',
      '  for (int i = 0; i < rangeSize; i++) holeCounts[i] = 0;',
      '',
      '  for (int i = 0; i < n; i++) {',
      '    int holeIndex = arr[i] - minVal;',
      '    holes[holeIndex][holeCounts[holeIndex]++] = arr[i];',
      '  }',
      '',
      '  int index = 0;',
      '  // For ascending sort: iterate i from 0 to rangeSize - 1',
      '  // For descending sort: iterate i from rangeSize - 1 down to 0',
      '  for (int i = 0; i < rangeSize; i++) { // Defaulting to ascending',
      '    for (int j = 0; j < holeCounts[i]; j++) {',
      '      arr[index++] = holes[i][j];',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <algorithm> // For std::min_element, std::max_element',
      '',
      'void pigeonholeSort(std::vector<int>& arr) {',
      '  if (arr.empty()) return;',
      '',
      '  int minVal = *std::min_element(arr.begin(), arr.end());',
      '  int maxVal = *std::max_element(arr.begin(), arr.end());',
      '  int rangeSize = maxVal - minVal + 1;',
      '',
      '  std::vector<std::vector<int>> pigeonholes(rangeSize);',
      '',
      '  for (int x : arr) {',
      '    pigeonholes[x - minVal].push_back(x);',
      '  }',
      '',
      '  int index = 0;',
      '  // For ascending sort: iterate i from 0 to rangeSize - 1',
      '  // For descending sort: iterate i from rangeSize - 1 down to 0',
      '  for (int i = 0; i < rangeSize; i++) { // Defaulting to ascending',
      '    for (int val : pigeonholes[i]) {',
      '      arr[index++] = val;',
      '    }',
      '  }',
      '}',
    ],
    python: [
      'def pigeonhole_sort(arr):',
      '    if not arr:',
      '        return []',
      '',
      '    min_val = min(arr)',
      '    max_val = max(arr)',
      '    range_size = max_val - min_val + 1',
      '',
      '    pigeonholes = [[] for _ in range(range_size)]',
      '',
      '    for x in arr:',
      '        pigeonholes[x - min_val].append(x)',
      '',
      '    index = 0',
      '    # For ascending sort: iterate i from 0 to range_size - 1',
      '    # For descending sort: iterate i from range_size - 1 down to 0',
      '    for i in range(range_size): # Defaulting to ascending',
      '        for val in pigeonholes[i]:',
      '            arr[index] = val',
      '            index += 1',
      '    return arr',
    ],
  },
  hasAdvancedAuxiliaryVisuals: true,
}
