'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { bogoSortGenerator } from '../algorithms'

export const bogoSortData: SortAlgorithm = {
  id: 'bogoSort',
  name: 'Bogo Sort',
  description:
    "Also known as permutation sort, stupid sort, or slowsort, Bogo Sort is a highly inefficient sorting algorithm based on the generate and test paradigm. It successively generates permutations of its input until it finds one that is sorted. It\'s primarily used for educational purposes to illustrate the concept of a worst-case algorithm or as a contrast to more effective sorting methods. Its average performance is astronomically poor, O((n+1)!).",
  generator: bogoSortGenerator,
  complexity: {
    time: { best: 'O(n)', average: 'O((n+1)!)', worst: 'O(âˆž)' },
    space: 'O(1)',
  },
  origin: { name: 'Conceptual / Humorous' },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure bogoSort(list, direction)',
      '  while not isSorted(list, direction)',
      '    shuffle(list)',
      '  end while',
      'end procedure',
      '',
      'procedure isSorted(list, direction)',
      '  for i = 0 to length of list - 2',
      '    if (direction == ASC and list[i] > list[i + 1]) or (direction == DESC and list[i] < list[i + 1]) then',
      '      return false',
      '    end if',
      '  end for',
      '  return true',
      'end procedure',
      '',
      'procedure shuffle(list)',
      '  for i = length of list - 1 down to 1',
      '    j = random integer from 0 to i (inclusive)',
      '    swap(list[i], list[j])',
      '  end for',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '#include <stdlib.h>',
      '#include <time.h>',
      '',
      'typedef enum { ASC, DESC } SortDirection;',
      '',
      'bool isSorted(int arr[], int n, SortDirection direction);',
      'void shuffle(int arr[], int n);',
      '',
      'void bogoSort(int arr[], int n, SortDirection direction) {',
      '  while (!isSorted(arr, n, direction)) {',
      '    shuffle(arr, n);',
      '  }',
      '}',
      '',
      'bool isSorted(int arr[], int n, SortDirection direction) {',
      '  for (int i = 0; i < n - 1; i++) {',
      '    if (direction == ASC) {',
      '      if (arr[i] > arr[i + 1]) return false;',
      '    } else {',
      '      if (arr[i] < arr[i + 1]) return false;',
      '    }',
      '  }',
      '  return true;',
      '}',
      '',
      'void shuffle(int arr[], int n) {',
      '  if (n <= 1) return;',
      '  for (int i = n - 1; i > 0; i--) {',
      '    int j = rand() % (i + 1);',
      '    int temp = arr[i];',
      '    arr[i] = arr[j];',
      '    arr[j] = temp;',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <algorithm>',
      '#include <random>',
      '',
      'enum class SortDirection { ASC, DESC };',
      '',
      'bool isSorted(const std::vector<int>& arr, SortDirection direction);',
      '',
      'void bogoSort(std::vector<int>& arr, SortDirection direction) {',
      '  std::random_device rd;',
      '  std::mt19937 g(rd());',
      '  while (!isSorted(arr, direction)) {',
      '    std::shuffle(arr.begin(), arr.end(), g);',
      '  }',
      '}',
      '',
      'bool isSorted(const std::vector<int>& arr, SortDirection direction) {',
      '  if (arr.empty()) return true;',
      '  for (size_t i = 0; i < arr.size() - 1; ++i) {',
      '    if (direction == SortDirection::ASC) {',
      '      if (arr[i] > arr[i + 1]) return false;',
      '    } else {',
      '      if (arr[i] < arr[i + 1]) return false;',
      '    }',
      '  }',
      '  return true;',
      '}',
    ],
    python: [
      'import random',
      '',
      'def bogo_sort(arr, direction="asc"):',
      '  while not _is_sorted_internal(arr, direction):',
      '    _shuffle_internal(arr)',
      '  return arr',
      '',
      'def _is_sorted_internal(arr, direction="asc"):',
      '  for i in range(len(arr) - 1):',
      '    if direction == "asc":',
      '      if arr[i] > arr[i+1]:',
      '        return False',
      '    else:',
      '      if arr[i] < arr[i+1]:',
      '        return False',
      '  return True',
      '',
      'def _shuffle_internal(arr):',
      '  n = len(arr)',
      '  for i in range(n - 1, 0, -1):',
      '    j = random.randint(0, i)',
      '    arr[i], arr[j] = arr[j], arr[i]',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [9], cpp: [8], python: [2] },
    1: { c: [10], cpp: [11], python: [3] },
    2: { c: [11], cpp: [12], python: [4] },
    3: { c: [12], cpp: [11], python: [3] },
    4: { c: [13], cpp: [14], python: [5] },
    6: { c: [15], cpp: [16], python: [7] },
    7: { c: [16], cpp: [18], python: [8] },
    8: { c: [17, 19], cpp: [19, 21], python: [9, 12] },
    9: { c: [18, 20], cpp: [20, 22], python: [10, 13] },
    10: { c: [18, 20], cpp: [20, 22], python: [10, 13] },
    11: { c: [22], cpp: [24], python: [8] },
    12: { c: [23], cpp: [25], python: [14] },
    13: { c: [24], cpp: [26], python: [14] },
    15: { c: [26], cpp: [12], python: [17] },
    16: { c: [28], cpp: [12], python: [19] },
    17: { c: [29], cpp: [12], python: [20] },
    18: { c: [30, 31, 32], cpp: [12], python: [21] },
    19: { c: [33], cpp: [12], python: [19] },
    20: { c: [34], cpp: [12], python: [21] },
  },
  hasAdvancedAuxiliaryVisuals: false,
}
