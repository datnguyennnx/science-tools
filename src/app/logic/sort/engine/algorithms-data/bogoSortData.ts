'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { bogoSortGenerator } from '../algorithms'

const rawPlaintextPseudoCode = [
  'procedure bogoSort(list, direction)',
  '  while not isSorted(list, direction)',
  '    shuffle(list)',
  '  end while',
  'end procedure',
  '',
  'procedure isSorted(list, direction)',
  '  for i = 0 to length of list - 2',
  '    if (direction == ASC and list[i] > list[i + 1]) or (direction == DESC and list[i] < list[i + 1]) then',
  '      return false',
  '    end if',
  '  end for',
  '  return true',
  'end procedure',
  '',
  'procedure shuffle(list)',
  '  for i = length of list - 1 down to 1',
  '    j = random integer from 0 to i (inclusive)',
  '    swap(list[i], list[j])',
  '  end for',
  'end procedure',
]

export const bogoSortData: SortAlgorithm = {
  id: 'bogoSort',
  name: 'Bogo Sort',
  description:
    "Also known as permutation sort, stupid sort, or slowsort, Bogo Sort is a highly inefficient sorting algorithm based on the generate and test paradigm. It successively generates permutations of its input until it finds one that is sorted. It's primarily used for educational purposes to illustrate the concept of a worst-case algorithm or as a contrast to more effective sorting methods. Its average performance is astronomically poor, O((n+1)!).",
  generator: bogoSortGenerator,
  complexity: {
    time: { best: 'O(n)', average: 'O((n+1)!)', worst: 'O(âˆž)' },
    space: 'O(1)',
  },
  origin: { name: 'Conceptual / Humorous' },
  img: '',
  pseudoCode: rawPlaintextPseudoCode,
  languageExamples: {
    c: [
      '#include <stdbool.h>',
      '#include <stdlib.h>',
      '#include <time.h>',
      '',
      'bool isSorted(int arr[], int n, bool ascending);',
      'void shuffle(int arr[], int n);',
      '',
      'void bogoSort(int arr[], int n, bool ascending) {',
      '  srand(time(NULL));',
      '  while (!isSorted(arr, n, ascending)) {',
      '    shuffle(arr, n);',
      '  }',
      '}',
      '',
      'bool isSorted(int arr[], int n, bool ascending) {',
      '  for (int i = 0; i < n - 1; i++) {',
      '    if (ascending) {',
      '      if (arr[i] > arr[i + 1]) return false;',
      '    } else {',
      '      if (arr[i] < arr[i + 1]) return false;',
      '    }',
      '  }',
      '  return true;',
      '}',
      '',
      'void shuffle(int arr[], int n) {',
      '  for (int i = n - 1; i > 0; i--) {',
      '    int j = rand() % (i + 1);',
      '    int temp = arr[i];',
      '    arr[i] = arr[j];',
      '    arr[j] = temp;',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <algorithm>',
      '#include <random>',
      '#include <chrono>',
      '',
      'template<typename T>',
      'bool isSorted(const std::vector<T>& arr, bool ascending) {',
      '  if (arr.empty()) return true;',
      '  for (size_t i = 0; i < arr.size() - 1; ++i) {',
      '    if (ascending) {',
      '      if (arr[i] > arr[i + 1]) return false;',
      '    } else {',
      '      if (arr[i] < arr[i + 1]) return false;',
      '    }',
      '  }',
      '  return true;',
      '}',
      '',
      'template<typename T>',
      'void bogoSort(std::vector<T>& arr, bool ascending) {',
      '  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();',
      '  std::default_random_engine rng(seed);',
      '  while (!isSorted(arr, ascending)) {',
      '    std::shuffle(arr.begin(), arr.end(), rng);',
      '  }',
      '}',
    ],
    python: [
      'import random',
      '',
      'def bogoSort(arr, ascending=True):',
      '  while not isSorted(arr, ascending):',
      '    random.shuffle(arr)',
      '  return arr',
      '',
      'def isSorted(arr, ascending=True):',
      '  for i in range(len(arr) - 1):',
      '    if ascending:',
      '      if arr[i] > arr[i+1]:',
      '        return False',
      '    else:',
      '      if arr[i] < arr[i+1]:',
      '        return False',
      '  return True',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [8], cpp: [20], python: [3] },
    1: { c: [10], cpp: [23], python: [4] },
    2: { c: [11], cpp: [24], python: [5] },
    3: { c: [12], cpp: [25], python: [5] },
    4: { c: [13], cpp: [26], python: [6] },
    6: { c: [15], cpp: [7], python: [8] },
    7: { c: [16], cpp: [9], python: [9] },
    8: { c: [17, 20], cpp: [10, 13], python: [10, 13] },
    9: { c: [18], cpp: [11], python: [11, 14] },
    10: { c: [21], cpp: [14], python: [11, 14] },
    11: { c: [22], cpp: [15], python: [15] },
    12: { c: [23], cpp: [16], python: [16] },
    13: { c: [24], cpp: [17], python: [16] },
    15: { c: [26] },
    16: { c: [27] },
    17: { c: [28] },
    18: { c: [29, 31] },
    19: { c: [32] },
    20: { c: [33] },
  },
  performancePaths: {
    best: [0, 1, 6, 7, 10, 11, 12, 3, 4],
    worst: [0, 1, 6, 7, 8, 9, 10, 11, 2, 15, 16, 17, 18, 19, 20, 1],
  },
  hasAdvancedAuxiliaryVisuals: false,
}
