'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { bogoSortGenerator } from '../algorithms'

export const bogoSortData: SortAlgorithm = {
  id: 'bogoSort',
  name: 'Bogo Sort',
  description:
    'Bogo Sort (also known as permutation sort, stupid sort, or slowsort) is a highly inefficient sorting algorithm based on the generate and test paradigm. The algorithm successively generates permutations of its input until it finds one that is sorted. It is not useful for sorting, but may be used for educational purposes, to contrast it with more efficient algorithms, or as a Gish gallop.',
  generator: bogoSortGenerator,
  complexity: {
    time: { best: 'O(n)', average: 'O((n+1)!)', worst: 'Infinity' },
    space: 'O(1)', // or O(n) if permutations are stored
  },
  origin: { name: 'N/A (Folklore)', year: 'Unknown' },
  // img: 'URL_to_bogo_sort_image_if_available', // Placeholder
  pseudoCodes: {
    plaintext: [
      'procedure bogoSort(list)',
      '  while not isSorted(list) do',
      '    shuffle(list)',
      '  end while',
      'end procedure',
      '',
      'function isSorted(list)',
      '  for i = 0 to length of list - 2',
      '    if list[i] > list[i+1] then',
      '      return false',
      '    end if',
      '  end for',
      '  return true',
      'end function',
      '',
      'procedure shuffle(list) // Fisher-Yates shuffle',
      '  for i = length of list - 1 down to 1',
      '    j = random integer between 0 and i (inclusive)',
      '    swap(list[i], list[j])',
      '  end for',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '#include <stdlib.h> // For rand(), srand()',
      '#include <time.h>   // For time() (usually call srand once in main)',
      '',
      'void swap(int* a, int* b) {',
      '  int temp = *a;',
      '  *a = *b;',
      '  *b = temp;',
      '}',
      '',
      'bool isSorted(int arr[], int n) {',
      '  for (int i = 0; i < n - 1; i++) {',
      '    if (arr[i] > arr[i + 1]) {',
      '      return false;',
      '    }',
      '  }',
      '  return true;',
      '}',
      '',
      'void shuffle(int arr[], int n) { // Fisher-Yates shuffle',
      '  for (int i = n - 1; i > 0; i--) {',
      '    int j = rand() % (i + 1);',
      '    swap(&arr[i], &arr[j]);',
      '  }',
      '}',
      '',
      'void bogoSort(int arr[], int n) {',
      '  // srand(time(NULL)); // Seed RNG once, e.g., in main()',
      '  while (!isSorted(arr, n)) {',
      '    shuffle(arr, n);',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>      // Example if using std::vector',
      '#include <algorithm>   // For std::is_sorted, std::shuffle (idiomatic C++)',
      '#include <random>      // For std::mt19937, std::random_device',
      '',
      '// Manual shuffle for consistency with other examples',
      'void shuffle_array_manual(int arr[], int n) {',
      '    std::random_device rd;',
      '    std::mt19937 g(rd());',
      '    for (int i = n - 1; i > 0; --i) {',
      '        std::uniform_int_distribution<int> distrib(0, i);',
      '        int j = distrib(g);',
      '        std::swap(arr[i], arr[j]); // std::swap is in <utility> or <algorithm>',
      '    }',
      '}',
      '',
      'bool is_array_sorted(int arr[], int n) {',
      '    for (int i = 0; i < n - 1; ++i) {',
      '        if (arr[i] > arr[i + 1]) {',
      '            return false;',
      '        }',
      '    }',
      '    return true;',
      '}',
      '',
      'void bogoSort(int arr[], int n) {',
      '  // // Idiomatic C++11 and later:',
      '  // std::random_device rd;',
      '  // std::mt19937 g(rd());',
      '  // while (!std::is_sorted(arr, arr + n)) {',
      '  //   std::shuffle(arr, arr + n, g);',
      '  // }',
      '',
      '  // Using manual helpers:',
      '  while (!is_array_sorted(arr, n)) {',
      '    shuffle_array_manual(arr, n);',
      '  }',
      '}',
    ],
    python: [
      'import random',
      '',
      'def is_sorted(arr):',
      '  for i in range(len(arr) - 1):',
      '    if arr[i] > arr[i + 1]:',
      '      return False',
      '  return True',
      '',
      'def shuffle_manual(arr): # Fisher-Yates shuffle',
      '  n = len(arr)',
      '  for i in range(n - 1, 0, -1):',
      '    j = random.randint(0, i)',
      '    arr[i], arr[j] = arr[j], arr[i]',
      '',
      'def bogo_sort(arr):',
      '  while not is_sorted(arr):',
      '    # shuffle_manual(arr) # Manual version',
      '    random.shuffle(arr) # Built-in, more concise',
    ],
  },
}
