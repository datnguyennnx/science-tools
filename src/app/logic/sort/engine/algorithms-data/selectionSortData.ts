'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { selectionSortGenerator } from '../algorithms'

export const selectionSortData: SortAlgorithm = {
  id: 'selectionSort',
  name: 'Selection Sort',
  description:
    'Selection Sort divides the input list into two parts: a sorted sublist built from left to right and the remaining unsorted sublist. The algorithm repeatedly finds the minimum element from the unsorted sublist and swaps it with the leftmost element of the unsorted sublist, effectively expanding the sorted portion. While straightforward, its O(n^2) complexity in all cases makes it less suitable for large datasets compared to more advanced algorithms.',
  generator: selectionSortGenerator,
  complexity: { time: { best: 'O(n^2)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'Fundamental/Early' },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure selectionSort(list, direction)',
      '  n = length of list',
      '  for i = 0 to n - 2',
      '    extremeIndex = i',
      '    for j = i + 1 to n - 1',
      '      if (direction == ASC and list[j] < list[extremeIndex]) or (direction == DESC and list[j] > list[extremeIndex]) then',
      '        extremeIndex = j',
      '      end if',
      '    end for',
      '    if extremeIndex != i then',
      '      swap(list[i], list[extremeIndex])',
      '    end if',
      '  end for',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '',
      'void swap(int* a, int* b) {',
      '  int temp = *a;',
      '  *a = *b;',
      '  *b = temp;',
      '}',
      '',
      'void selectionSort(int arr[], int n, bool ascending) {',
      '  if (n <= 1) return;',
      '  for (int i = 0; i < n - 1; i++) {',
      '    int extremeIndex = i;',
      '    for (int j = i + 1; j < n; j++) {',
      '      bool foundNewExtreme;',
      '      if (ascending) {',
      '        foundNewExtreme = (arr[j] < arr[extremeIndex]);',
      '      } else {',
      '        foundNewExtreme = (arr[j] > arr[extremeIndex]);',
      '      }',
      '      if (foundNewExtreme) {',
      '        extremeIndex = j;',
      '      }',
      '    }',
      '    if (extremeIndex != i) {',
      '      swap(&arr[i], &arr[extremeIndex]);',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <utility>',
      '#include <stdbool.h>',
      '',
      'template <typename T>',
      'void selectionSort(T& arr, int n, bool ascending) {',
      '  if (n <= 1) return;',
      '  for (int i = 0; i < n - 1; i++) {',
      '    int extremeIndex = i;',
      '    for (int j = i + 1; j < n; j++) {',
      '      bool foundNewExtreme;',
      '      if (ascending) {',
      '        foundNewExtreme = (arr[j] < arr[extremeIndex]);',
      '      } else {',
      '        foundNewExtreme = (arr[j] > arr[extremeIndex]);',
      '      }',
      '      if (foundNewExtreme) {',
      '        extremeIndex = j;',
      '      }',
      '    }',
      '    if (extremeIndex != i) {',
      '      std::swap(arr[i], arr[extremeIndex]);',
      '    }',
      '  }',
      '}',
      '',
      'void selectionSort(std::vector<int>& arr, bool ascending) {',
      '  selectionSort(arr, arr.size(), ascending);',
      '}',
    ],
    python: [
      'def selection_sort(arr, ascending=True):',
      '  n = len(arr)',
      '  if n <= 1:',
      '    return arr',
      '  for i in range(n - 1):',
      '    extreme_index = i',
      '    for j in range(i + 1, n):',
      '      if ascending:',
      '        if arr[j] < arr[extreme_index]:',
      '          found_new_extreme = True',
      '      else:',
      '        if arr[j] > arr[extreme_index]:',
      '          found_new_extreme = True',
      '      ',
      '      if found_new_extreme:',
      '        extreme_index = j',
      '    ',
      '    if extreme_index != i:',
      '      arr[i], arr[extreme_index] = arr[extreme_index], arr[i]',
      '  return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [11], cpp: [8, 28], python: [0] },
    1: { c: [11], cpp: [8], python: [1] },
    2: { c: [13], cpp: [10], python: [4] },
    3: { c: [14], cpp: [11], python: [5] },
    4: { c: [15], cpp: [12], python: [6] },
    7: { c: [17, 20], cpp: [14, 17], python: [9, 12] },
    8: { c: [22], cpp: [19], python: [16] },
    9: { c: [22], cpp: [19], python: [16] },
    10: { c: [15], cpp: [12], python: [6] },
    11: { c: [25], cpp: [22], python: [19] },
    12: { c: [26], cpp: [23], python: [20] },
    13: { c: [25], cpp: [22], python: [19] },
    14: { c: [13], cpp: [10], python: [4] },
    15: { c: [28], cpp: [25, 29], python: [21] },
  },
  hasAdvancedAuxiliaryVisuals: false,
}
