'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { cycleSortGenerator } from '../algorithms'

export const cycleSortData: SortAlgorithm = {
  id: 'cycleSort',
  name: 'Cycle Sort',
  description:
    'Cycle Sort is an in-place sorting algorithm that is optimal in terms of the number of writes to the original array. It is based on the idea of permutations and cycles. For each element, it finds its correct position in the sorted array and rotates the elements that are in the way to complete a cycle. This minimizes writes because each element is written at most once to its final sorted position. While it has a worst-case time complexity of O(n^2), its focus on minimizing writes makes it suitable for scenarios where writes are significantly more expensive than reads.',
  generator: cycleSortGenerator,
  complexity: { time: { best: 'O(n^2)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'J.P. Black & P.J.P. Taylor', year: 1990 },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure cycleSort(list)',
      '  n = length of list',
      '  for cycleStart = 0 to n - 2',
      '    itemInHand = list[cycleStart]',
      '    pos = cycleStart',
      '    for i = cycleStart + 1 to n - 1',
      '      // For ascending: list[i] < itemInHand',
      '      // For descending: list[i] > itemInHand',
      '      if list[i] < itemInHand then // Defaulting to ascending',
      '        pos = pos + 1',
      '      end if',
      '',
      '    if pos == cycleStart then',
      '      continue',
      '    end if',
      '',
      '    while itemInHand == list[pos]',
      '      pos = pos + 1',
      '    end while',
      '',
      '    if pos != cycleStart then',
      '      swap itemInHand with list[pos]',
      '    end if',
      '',
      '    while pos != cycleStart',
      '      pos = cycleStart',
      '      for i = cycleStart + 1 to n - 1',
      '        // For ascending: list[i] < itemInHand',
      '        // For descending: list[i] > itemInHand',
      '        if list[i] < itemInHand then // Defaulting to ascending',
      '          pos = pos + 1',
      '        end if',
      '      end for',
      '',
      '      while itemInHand == list[pos]',
      '        pos = pos + 1',
      '      end while',
      '',
      '      if itemInHand != list[pos] then',
      '        swap itemInHand with list[pos]',
      '      end if',
      '    end while',
      '  end for',
      'end procedure',
    ],
    c: [
      'void cycleSort(int arr[], int n) {',
      '  for (int cycle_start = 0; cycle_start <= n - 2; cycle_start++) {',
      '    int item = arr[cycle_start];',
      '    int pos = cycle_start;',
      '    for (int i = cycle_start + 1; i < n; i++) {',
      '      // For ascending: arr[i] < item',
      '      // For descending: arr[i] > item',
      '      if (arr[i] < item) { // Defaulting to ascending',
      '        pos++;',
      '      }',
      '    }',
      '    if (pos == cycle_start) {',
      '      continue;',
      '    }',
      '    while (item == arr[pos]) {',
      '      pos++;',
      '    }',
      '    if (pos != cycle_start) {',
      '      int temp = item;',
      '      item = arr[pos];',
      '      arr[pos] = temp;',
      '    }',
      '    while (pos != cycle_start) {',
      '      pos = cycle_start;',
      '      for (int i = cycle_start + 1; i < n; i++) {',
      '        // For ascending: arr[i] < item',
      '        // For descending: arr[i] > item',
      '        if (arr[i] < item) { // Defaulting to ascending',
      '          pos++;',
      '        }',
      '      }',
      '      while (item == arr[pos]) {',
      '        pos++;',
      '      }',
      '      if (item != arr[pos]) {',
      '        int temp = item;',
      '        item = arr[pos];',
      '        arr[pos] = temp;',
      '      }',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      '#include <algorithm> // For std::swap, though manual swap is shown',
      '',
      'void cycleSort(int arr[], int n) {',
      '  for (int cycle_start = 0; cycle_start <= n - 2; cycle_start++) {',
      '    int item = arr[cycle_start];',
      '    int pos = cycle_start;',
      '    for (int i = cycle_start + 1; i < n; i++) {',
      '      // For ascending: arr[i] < item',
      '      // For descending: arr[i] > item',
      '      if (arr[i] < item) { // Defaulting to ascending',
      '        pos++;',
      '      }',
      '    }',
      '    if (pos == cycle_start) {',
      '      continue;',
      '    }',
      '    while (item == arr[pos]) {',
      '      pos++;',
      '    }',
      '    if (pos != cycle_start) {',
      '      std::swap(item, arr[pos]);',
      '    }',
      '    while (pos != cycle_start) {',
      '      pos = cycle_start;',
      '      for (int i = cycle_start + 1; i < n; i++) {',
      '        // For ascending: arr[i] < item',
      '        // For descending: arr[i] > item',
      '        if (arr[i] < item) { // Defaulting to ascending',
      '          pos++;',
      '        }',
      '      }',
      '      while (item == arr[pos]) {',
      '        pos++;',
      '      }',
      '      if (item != arr[pos]) {',
      '        std::swap(item, arr[pos]);',
      '      }',
      '    }',
      '  }',
      '}',
    ],
    python: [
      'def cycle_sort(arr):',
      '    n = len(arr)',
      '    for cycle_start in range(n - 1):',
      '        item = arr[cycle_start]',
      '        pos = cycle_start',
      '        for i in range(cycle_start + 1, n):',
      '            # For ascending: arr[i] < item',
      '            # For descending: arr[i] > item',
      '            if arr[i] < item: # Defaulting to ascending',
      '                pos += 1',
      '',
      '        if pos == cycle_start:',
      '            continue',
      '',
      '        while item == arr[pos]:',
      '            pos += 1',
      '',
      '        if pos != cycle_start:',
      '            arr[pos], item = item, arr[pos]',
      '',
      '        while pos != cycle_start:',
      '            pos = cycle_start',
      '            for i in range(cycle_start + 1, n):',
      '                # For ascending: arr[i] < item',
      '                # For descending: arr[i] > item',
      '                if arr[i] < item: # Defaulting to ascending',
      '                    pos += 1',
      '',
      '            while item == arr[pos]:',
      '                pos += 1',
      '',
      '            if item != arr[pos]:',
      '                arr[pos], item = item, arr[pos]',
      '    return arr',
    ],
  },
  hasAdvancedAuxiliaryVisuals: false,
}
