'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { heapSortGenerator } from '../algorithms'

export const heapSortData: SortAlgorithm = {
  id: 'heapSort',
  name: 'Heap Sort',
  description:
    'Invented by J. W. J. Williams in 1964, Heap Sort is a comparison-based sorting algorithm that leverages the heap data structure. It first builds a max-heap (for ascending sort; a min-heap for descending sort) from the input array, where the largest (or smallest) element is at the root. Then, it repeatedly extracts the maximum (or minimum) element from the heap and places it at the end (or beginning for some descending variations) of the array, rebuilding the heap with the remaining elements. This process continues until the array is sorted. A key advantage is its O(1) space complexity for typical implementations, performing the sort in-place.',
  generator: heapSortGenerator,
  complexity: {
    time: { best: 'O(n log n)', average: 'O(n log n)', worst: 'O(n log n)' },
    space: 'O(1)',
  },
  origin: { name: 'J. W. J. Williams', year: 1964 },
  img: 'https://ottawacitizen.remembering.ca/_next/image?url=https%3A%2F%2Fd1q40j6jx1d8h6.cloudfront.net%2FObituaries%2F41508162%2FThumbnail_1.jpg&w=3840&q=75',
  pseudoCodes: {
    plaintext: [
      'procedure heapSort(list)',
      '  n = length of list',
      '',
      '  // Build max heap (for ascending sort) or min heap (for descending sort)',
      '  for i = (n / 2) - 1 down to 0',
      '    heapify(list, n, i)',
      '  end for',
      '',
      '  // Extract elements from heap one by one',
      '  for i = n - 1 down to 1',
      '    swap(list[0], list[i])',
      '    heapify(list, i, 0) // heapify on the reduced heap',
      '  end for',
      'end procedure',
      '',
      'procedure heapify(list, heapSize, rootIndex) // Assumes max-heap logic (for ascending sort) by default',
      "  extremeElementIndex = rootIndex // Represents index of 'largest' for max-heap, or 'smallest' for min-heap",
      '  left = 2 * rootIndex + 1',
      '  right = 2 * rootIndex + 2',
      '',
      '  // For max-heap (ascending sort): if list[left] > list[extremeElementIndex]',
      '  // For min-heap (descending sort): if list[left] < list[extremeElementIndex]',
      '  if left < heapSize and list[left] > list[extremeElementIndex] then // Defaulting to max-heap logic',
      '    extremeElementIndex = left',
      '  end if',
      '',
      '  // For max-heap (ascending sort): if list[right] > list[extremeElementIndex]',
      '  // For min-heap (descending sort): if list[right] < list[extremeElementIndex]',
      '  if right < heapSize and list[right] > list[extremeElementIndex] then // Defaulting to max-heap logic',
      '    extremeElementIndex = right',
      '  end if',
      '',
      '  if extremeElementIndex != rootIndex then',
      '    swap(list[rootIndex], list[extremeElementIndex])',
      '    heapify(list, heapSize, extremeElementIndex)',
      '  end if',
      'end procedure',
    ],
    c: [
      'void swap(int* a, int* b) {',
      '  int temp = *a;',
      '  *a = *b;',
      '  *b = temp;',
      '}',
      '',
      'void heapify(int arr[], int n, int i) {',
      '  int largest = i;',
      '  int left = 2 * i + 1;',
      '  int right = 2 * i + 2;',
      '',
      '  // For max-heap (ascending sort): arr[left] > arr[largest]',
      '  // For min-heap (descending sort): arr[left] < arr[largest]',
      '  if (left < n && arr[left] > arr[largest]) // Defaulting to max-heap logic',
      '    largest = left;',
      '',
      '  // For max-heap (ascending sort): arr[right] > arr[largest]',
      '  // For min-heap (descending sort): arr[right] < arr[largest]',
      '  if (right < n && arr[right] > arr[largest]) // Defaulting to max-heap logic',
      '    largest = right;',
      '',
      '  if (largest != i) {',
      '    swap(&arr[i], &arr[largest]);',
      '    heapify(arr, n, largest);',
      '  }',
      '}',
      '',
      'void heapSort(int arr[], int n) {',
      '  for (int i = n / 2 - 1; i >= 0; i--)',
      '    heapify(arr, n, i);',
      '',
      '  for (int i = n - 1; i > 0; i--) {',
      '    swap(&arr[0], &arr[i]);',
      '    heapify(arr, i, 0);',
      '  }',
      '}',
    ],
    cpp: [
      '#include <utility> // For std::swap',
      '',
      'void heapify(int arr[], int n, int i) {',
      '  int largest = i;',
      '  int left = 2 * i + 1;',
      '  int right = 2 * i + 2;',
      '',
      '  // For max-heap (ascending sort): arr[left] > arr[largest]',
      '  // For min-heap (descending sort): arr[left] < arr[largest]',
      '  if (left < n && arr[left] > arr[largest]) // Defaulting to max-heap logic',
      '    largest = left;',
      '',
      '  // For max-heap (ascending sort): arr[right] > arr[largest]',
      '  // For min-heap (descending sort): arr[right] < arr[largest]',
      '  if (right < n && arr[right] > arr[largest]) // Defaulting to max-heap logic',
      '    largest = right;',
      '',
      '  if (largest != i) {',
      '    std::swap(arr[i], arr[largest]);',
      '    heapify(arr, n, largest);',
      '  }',
      '}',
      '',
      'void heapSort(int arr[], int n) {',
      '  for (int i = n / 2 - 1; i >= 0; i--)',
      '    heapify(arr, n, i);',
      '',
      '  for (int i = n - 1; i > 0; i--) {',
      '    std::swap(arr[0], arr[i]);',
      '    heapify(arr, i, 0);',
      '  }',
      '}',
    ],
    python: [
      'def heapify(arr, n, i):',
      '  largest = i',
      '  left = 2 * i + 1',
      '  right = 2 * i + 2',
      '',
      '  # For max-heap (ascending sort): arr[left] > arr[largest]',
      '  # For min-heap (descending sort): arr[left] < arr[largest]',
      '  if left < n and arr[left] > arr[largest]: # Defaulting to max-heap logic',
      '    largest = left',
      '',
      '  # For max-heap (ascending sort): arr[right] > arr[largest]',
      '  # For min-heap (descending sort): arr[right] < arr[largest]',
      '  if right < n and arr[right] > arr[largest]: # Defaulting to max-heap logic',
      '    largest = right',
      '',
      '  if largest != i:',
      '    arr[i], arr[largest] = arr[largest], arr[i]',
      '    heapify(arr, n, largest)',
      '',
      'def heapSort(arr):',
      '  n = len(arr)',
      '',
      '  # Build a maxheap',
      '  for i in range(n // 2 - 1, -1, -1):',
      '    heapify(arr, n, i)',
      '',
      '  # One by one extract elements',
      '  for i in range(n - 1, 0, -1):',
      '    arr[i], arr[0] = arr[0], arr[i]',
      '    heapify(arr, i, 0)',
    ],
  },
  hasAdvancedAuxiliaryVisuals: false,
}
