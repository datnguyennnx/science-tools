'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { gnomeSortGenerator } from '../algorithms'

const rawPlaintextPseudoCode = [
  'procedure gnomeSort(list, direction)',
  '  index = 0',
  '  n = length of list',
  '  while index < n',
  '    if index == 0 then',
  '      index = index + 1',
  '    else if (direction == ASC and list[index] >= list[index - 1]) or (direction == DESC and list[index] <= list[index - 1]) then',
  '      index = index + 1',
  '    else',
  '      swap(list[index], list[index - 1])',
  '      index = index - 1',
  '    end if',
  '  end while',
  'end procedure',
]

export const gnomeSortData: SortAlgorithm = {
  id: 'gnomeSort',
  name: 'Gnome Sort',
  description:
    'Originally called "Stupid Sort," Gnome Sort is a simple sorting algorithm conceived by Hamid Sarbazi-Azad and later described and named "Gnome Sort" by Dick Grune. It is similar to Insertion Sort but instead of using nested loops to find the insertion position, it repeatedly compares adjacent elements and swaps them if they are in the wrong order, moving back only when a swap occurs. It\'s known for its simplicity and is often used as an educational example.',
  generator: gnomeSortGenerator,
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'Hamid Sarbazi-Azad / Dick Grune', year: 2000 },
  img: 'https://sharif.edu/~azad/Works_files/image003.jpg',
  pseudoCode: rawPlaintextPseudoCode,
  languageExamples: {
    c: [
      '#include <stdbool.h>',
      '',
      'void swap(int* a, int* b) {',
      '    int temp = *a;',
      '    *a = *b;',
      '    *b = temp;',
      '}',
      '',
      'void gnomeSort(int arr[], int n, bool ascending) {',
      '    if (n <= 1) return;',
      '    int index = 0;',
      '    while (index < n) {',
      '        if (index == 0) {',
      '            index++;',
      '        }',
      '        bool inOrder;',
      '        if (ascending) {',
      '            inOrder = (arr[index] >= arr[index - 1]);',
      '        } else {',
      '            inOrder = (arr[index] <= arr[index - 1]);',
      '        }',
      '        if (inOrder) {',
      '            index++;',
      '        } else {',
      '            swap(&arr[index], &arr[index - 1]);',
      '            index--;',
      '        }',
      '    }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <utility> // For std::swap',
      '#include <stdbool.h>',
      '',
      'template <typename T>',
      'void gnomeSort(std::vector<T>& arr, bool ascending) {',
      '    int n = arr.size();',
      '    if (n <= 1) return;',
      '    int index = 0;',
      '    while (index < n) {',
      '        if (index == 0) {',
      '            index++;',
      '        }',
      '        bool inOrder;',
      '        if (ascending) {',
      '            inOrder = (arr[index] >= arr[index - 1]);',
      '        } else {',
      '            inOrder = (arr[index] <= arr[index - 1]);',
      '        }',
      '        if (inOrder) {',
      '            index++;',
      '        } else {',
      '            std::swap(arr[index], arr[index - 1]);',
      '            index--;',
      '        }',
      '    }',
      '}',
    ],
    python: [
      'def gnome_sort(arr, ascending=True):',
      '    n = len(arr)',
      '    if n <= 1:',
      '        return arr',
      '    index = 0',
      '    while index < n:',
      '        if index == 0:',
      '            index += 1',
      '        in_order = False',
      '        if ascending:',
      '            if arr[index] >= arr[index - 1]:',
      '                in_order = True',
      '        else:',
      '            if arr[index] <= arr[index - 1]:',
      '                in_order = True',
      '        if in_order:',
      '            index += 1',
      '        else:',
      '            arr[index], arr[index - 1] = arr[index - 1], arr[index]',
      '            index -= 1',
      '    return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [9], cpp: [6], python: [1] },
    1: { c: [11], cpp: [9], python: [5] },
    2: { c: [10], cpp: [7], python: [2] },
    3: { c: [12], cpp: [10], python: [6] },
    4: { c: [13], cpp: [11], python: [7] },
    5: { c: [14], cpp: [12], python: [8] },
    6: {
      c: [16, 17, 18, 19, 20, 22],
      cpp: [14, 15, 16, 17, 18, 20],
      python: [10, 11, 12, 13, 14, 15, 16, 18],
    },
    7: { c: [23], cpp: [21], python: [19] },
    8: { c: [24], cpp: [22], python: [20] },
    9: { c: [25], cpp: [23], python: [21] },
    10: { c: [26], cpp: [24], python: [22] },
    11: { c: [27], cpp: [25], python: [22] },
    12: { c: [28], cpp: [26], python: [22] },
    13: { c: [29], cpp: [27], python: [23] },
  },
  performancePaths: {
    best: [0, 1, 2, 3, 4, 5, 6, 7, 11, 12, 13],
    worst: [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13],
    average: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],
  },
  hasAdvancedAuxiliaryVisuals: false,
}
