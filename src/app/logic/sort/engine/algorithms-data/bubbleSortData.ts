import type { SortAlgorithm } from '../algorithmRegistry'

const rawPlaintextPseudoCode = [
  'procedure bubbleSort(list, direction)',
  '  n = length of list',
  '  for i = 0 to n - 2',
  '    swapped = false',
  '    for j = 0 to n - 2 - i',
  '      if (direction == ASC and list[j] > list[j + 1]) or (direction == DESC and list[j] < list[j + 1]) then',
  '        swap(list[j], list[j + 1])',
  '        swapped = true',
  '      end if',
  '    end for',
  '    if not swapped then',
  '      break',
  '    end if',
  '  end for',
  'end procedure',
]

export const bubbleSortData: SortAlgorithm = {
  id: 'bubbleSort',
  name: 'Bubble Sort',
  description:
    'Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. While simple to understand, it is inefficient for large lists.',
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'Unknown', year: 'Before 1956 (referenced by Iverson)' },
  img: '',
  pseudoCode: rawPlaintextPseudoCode,
  languageExamples: {
    c: [
      '#include <stdbool.h>',
      '',
      'void swap(int* xp, int* yp) {',
      '    int temp = *xp;',
      '    *xp = *yp;',
      '    *yp = temp;',
      '}',
      '',
      'void bubbleSort(int arr[], int n, bool ascending) {',
      '    int i, j;',
      '    bool swapped;',
      '    for (i = 0; i < n - 1; i++) {',
      '        swapped = false;',
      '        for (j = 0; j < n - i - 1; j++) {',
      '            bool shouldSwap = false;',
      '            if (ascending) {',
      '                if (arr[j] > arr[j + 1]) {',
      '                    shouldSwap = true;',
      '                }',
      '            } else {',
      '                if (arr[j] < arr[j + 1]) {',
      '                    shouldSwap = true;',
      '                }',
      '            }',
      '            if (shouldSwap) {',
      '                swap(&arr[j], &arr[j + 1]);',
      '                swapped = true;',
      '            }',
      '        }',
      '        if (swapped == false)',
      '            break;',
      '    }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <utility>',
      '',
      'template <typename T>',
      'void bubbleSort(std::vector<T>& arr, bool ascending) {',
      '    int n = arr.size();',
      '    bool swapped;',
      '    for (int i = 0; i < n - 1; i++) {',
      '        swapped = false;',
      '        for (int j = 0; j < n - i - 1; j++) {',
      '            bool shouldSwap = false;',
      '            if (ascending) {',
      '                if (arr[j] > arr[j + 1]) {',
      '                    shouldSwap = true;',
      '                }',
      '            } else {',
      '                if (arr[j] < arr[j + 1]) {',
      '                    shouldSwap = true;',
      '                }',
      '            }',
      '            if (shouldSwap) {',
      '                std::swap(arr[j], arr[j + 1]);',
      '                swapped = true;',
      '            }',
      '        }',
      '        if (!swapped)',
      '            break;',
      '    }',
      '}',
    ],
    python: [
      'def bubbleSort(arr, ascending=True):',
      '    n = len(arr)',
      '    for i in range(n - 1):',
      '        swapped = False',
      '        for j in range(n - i - 1):',
      '            if ascending:',
      '                if arr[j] > arr[j+1]:',
      '                    arr[j], arr[j+1] = arr[j+1], arr[j]',
      '                    swapped = True',
      '            else:',
      '                if arr[j] < arr[j+1]:',
      '                    arr[j], arr[j+1] = arr[j+1], arr[j]',
      '                    swapped = True',
      '        if not swapped:',
      '            break',
      '    return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [10], cpp: [5], python: [1] },
    1: { c: [10], cpp: [6], python: [2] },
    2: { c: [12], cpp: [8], python: [3] },
    3: { c: [13], cpp: [9], python: [4] },
    4: { c: [15], cpp: [11], python: [5] },
    5: { c: [17, 23], cpp: [13, 19], python: [6, 10] },
    6: { c: [28], cpp: [24], python: [8, 12] },
    7: { c: [29], cpp: [25], python: [9, 13] },
    8: { c: [30], cpp: [26], python: [9, 13] },
    9: { c: [31], cpp: [27], python: [13] },
    10: { c: [33], cpp: [29], python: [16] },
    11: { c: [34], cpp: [30], python: [17] },
    12: { c: [34], cpp: [30], python: [17] },
    13: { c: [35], cpp: [31], python: [17] },
    14: { c: [36], cpp: [32], python: [18] },
  },
  performancePaths: {
    best: [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14],
    worst: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14],
    average: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14],
  },
}
