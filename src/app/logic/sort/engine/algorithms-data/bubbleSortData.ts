'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { bubbleSortGenerator } from '../algorithms'

export const bubbleSortData: SortAlgorithm = {
  id: 'bubbleSort',
  name: 'Bubble Sort',
  description:
    'Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted. While simple to understand, it is inefficient for large lists.',
  generator: bubbleSortGenerator,
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'Unknown', year: 'Before 1956 (referenced by Iverson)' },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure bubbleSort(list, direction)',
      '  n = length of list',
      '  for i = 0 to n - 2',
      '    swapped = false',
      '    for j = 0 to n - 2 - i',
      '      if (direction == ASC and list[j] > list[j + 1]) or (direction == DESC and list[j] < list[j + 1]) then',
      '        swap(list[j], list[j + 1])',
      '        swapped = true',
      '      end if',
      '    end for',
      '    if not swapped then',
      '      break',
      '    end if',
      '  end for',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '',
      'typedef enum { ASC, DESC } SortDirection;',
      '',
      'void swap(int *xp, int *yp) {',
      '    int temp = *xp;',
      '    *xp = *yp;',
      '    *yp = temp;',
      '}',
      '',
      'void bubbleSort(int arr[], int n, SortDirection direction) {',
      '    if (n <= 1) return;',
      '    bool swapped;',
      '    for (int i = 0; i < n - 1; i++) {',
      '        swapped = false;',
      '        for (int j = 0; j < n - 1 - i; j++) {',
      '            bool conditionMet = false;',
      '            if (direction == ASC) {',
      '                if (arr[j] > arr[j + 1]) conditionMet = true;',
      '            } else {',
      '                if (arr[j] < arr[j + 1]) conditionMet = true;',
      '            }',
      '            if (conditionMet) {',
      '                swap(&arr[j], &arr[j + 1]);',
      '                swapped = true;',
      '            }',
      '        }',
      '        if (swapped == false) {',
      '            break;',
      '        }',
      '    }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <algorithm>',
      '',
      'enum class SortDirection { ASC, DESC };',
      '',
      'void bubbleSort(std::vector<int>& arr, SortDirection direction) {',
      '    int n = arr.size();',
      '    if (n <= 1) return;',
      '    bool swapped;',
      '    for (int i = 0; i < n - 1; i++) {',
      '        swapped = false;',
      '        for (int j = 0; j < n - 1 - i; j++) {',
      '            bool conditionMet = false;',
      '            if (direction == SortDirection::ASC) {',
      '                if (arr[j] > arr[j + 1]) conditionMet = true;',
      '            } else {',
      '                if (arr[j] < arr[j + 1]) conditionMet = true;',
      '            }',
      '            if (conditionMet) {',
      '                std::swap(arr[j], arr[j + 1]);',
      '                swapped = true;',
      '            }',
      '        }',
      '        if (swapped == false) {',
      '            break;',
      '        }',
      '    }',
      '}',
    ],
    python: [
      'def bubble_sort(arr, direction="asc"):',
      '    n = len(arr)',
      '    if n <= 1:',
      '        return arr',
      '    for i in range(n - 1):',
      '        swapped = False',
      '        for j in range(n - 1 - i):',
      '            condition_met = False',
      '            if direction == "asc":',
      '                if arr[j] > arr[j + 1]:',
      '                    condition_met = True',
      '            else:',
      '                if arr[j] < arr[j + 1]:',
      '                    condition_met = True',
      '            ',
      '            if condition_met:',
      '                arr[j], arr[j + 1] = arr[j + 1], arr[j]',
      '                swapped = True',
      '        if not swapped:',
      '            break',
      '    return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [10], cpp: [5], python: [0] },
    1: { c: [11], cpp: [6], python: [1] },
    2: { c: [13], cpp: [9], python: [4] },
    3: { c: [14], cpp: [10], python: [5] },
    4: { c: [15], cpp: [11], python: [6] },
    5: { c: [17, 18, 19, 20, 21], cpp: [13, 14, 15, 16, 17], python: [8, 9, 10, 12, 13, 14] },
    6: { c: [22], cpp: [18], python: [16] },
    7: { c: [23], cpp: [19], python: [17] },
    8: { c: [24], cpp: [20], python: [17] },
    9: { c: [25], cpp: [21], python: [18] },
    10: { c: [26], cpp: [22], python: [18] },
    11: { c: [27], cpp: [23], python: [19] },
    12: { c: [28], cpp: [24], python: [19] },
    13: { c: [29], cpp: [25], python: [20] },
    14: { c: [30], cpp: [26], python: [20] },
  },
  hasAdvancedAuxiliaryVisuals: false,
}
