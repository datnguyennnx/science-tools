'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { bubbleSortGenerator } from '../algorithms'

export const bubbleSortData: SortAlgorithm = {
  id: 'bubbleSort',
  name: 'Bubble Sort',
  description:
    'One of the simplest sorting algorithms, Bubble Sort works by repeatedly stepping through the list and comparing adjacent elements, swapping them if they are in the wrong order. The process is repeated until the list is sorted. Its name comes from the way larger elements "bubble up" to the end of the list. While highly inefficient for large lists, its simplicity makes it a common teaching tool to introduce the concept of sorting.',
  generator: bubbleSortGenerator,
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'Fundamental/Early', year: 'Popularized ~1962' },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure bubbleSort(list)',
      '  n = length of list',
      '  for i = 0 to n - 2 // Number of passes',
      '    swapped = false',
      '    // Last i elements are already in place',
      '    for j = 0 to n - 2 - i // Iterate through unsorted part',
      '      if list[j] > list[j+1] then',
      '        swap(list[j], list[j+1])',
      '        swapped = true',
      '      end if',
      '    end for',
      '    // If no two elements were swapped by inner loop, then break',
      '    if not swapped then',
      '      break',
      '    end if',
      '  end for',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h> // Required for bool type',
      '',
      'void bubbleSort(int arr[], int n) {',
      '  int i, j, temp;',
      '  bool swapped;',
      '  for (i = 0; i < n - 1; i++) {',
      '    swapped = false;',
      '    for (j = 0; j < n - 1 - i; j++) {',
      '      if (arr[j] > arr[j+1]) {',
      '        temp = arr[j];',
      '        arr[j] = arr[j+1];',
      '        arr[j+1] = temp;',
      '        swapped = true;',
      '      }',
      '    }',
      '    if (swapped == false)',
      '      break;',
      '  }',
      '}',
    ],
    cpp: [
      '#include <utility> // Required for std::swap (or <algorithm>)',
      '#include <stdbool.h> // Required for bool type (though C++ bool is built-in, an explicit include for clarity with C is fine or can be omitted if strictly C++)',
      '',
      'void bubbleSort(int arr[], int n) {',
      '  bool swapped;',
      '  for (int i = 0; i < n - 1; i++) {',
      '    swapped = false;',
      '    for (int j = 0; j < n - 1 - i; j++) {',
      '      if (arr[j] > arr[j+1]) {',
      '        std::swap(arr[j], arr[j+1]);',
      '        swapped = true;',
      '      }',
      '    }',
      '    if (!swapped)',
      '      break;',
      '  }',
      '}',
    ],
    python: [
      'def bubbleSort(arr):',
      '  n = len(arr)',
      '  for i in range(n - 1):',
      '    swapped = False',
      '    for j in range(n - 1 - i):',
      '      if arr[j] > arr[j+1]:',
      '        arr[j], arr[j+1] = arr[j+1], arr[j]',
      '        swapped = True',
      '    if not swapped:',
      '      break',
    ],
  },
  hasAdvancedAuxiliaryVisuals: false,
}
