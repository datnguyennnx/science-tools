'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { quickSortGenerator } from '../algorithms'

export const quickSortData: SortAlgorithm = {
  id: 'quickSort',
  name: 'Quick Sort',
  description:
    'Developed by Tony Hoare in 1959 while working on machine translation, Quick Sort is a highly efficient, widely used sorting algorithm that also follows the divide-and-conquer paradigm. It selects a "pivot" element from the array and partitions the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively. Hoare famously conceived the algorithm during a lunch break, initially struggling with the details but recognizing its potential for speed.',
  generator: quickSortGenerator,
  complexity: {
    time: { best: 'O(n log n)', average: 'O(n log n)', worst: 'O(n^2)' },
    space: 'O(log n)',
  },
  origin: { name: 'Tony Hoare', year: 1959 },
  img: 'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Sir_Tony_Hoare_IMG_5125.jpg/1200px-Sir_Tony_Hoare_IMG_5125.jpg',
  pseudoCodes: {
    plaintext: [
      'procedure quickSort(list, low, high)',
      '  if low < high then',
      '    pivotIndex = partition(list, low, high)',
      '    quickSort(list, low, pivotIndex - 1)',
      '    quickSort(list, pivotIndex + 1, high)',
      '  end if',
      'end procedure',
      '',
      'procedure partition(list, low, high)',
      '  pivot = list[high]',
      '  i = low - 1',
      '  for j = low to high - 1',
      '    // For ascending sort: list[j] <= pivot',
      '    // For descending sort: list[j] >= pivot',
      '    if list[j] <= pivot then // Defaulting to ascending sort logic',
      '      i = i + 1',
      '      swap(list[i], list[j])',
      '    end if',
      '  end for',
      '  swap(list[i + 1], list[high])',
      '  return i + 1',
      'end procedure',
    ],
    c: [
      'void swap(int* a, int* b) {',
      '  int t = *a;',
      '  *a = *b;',
      '  *b = t;',
      '}',
      '',
      'int partition(int arr[], int low, int high) {',
      '  int pivot = arr[high];',
      '  int i = (low - 1);',
      '  for (int j = low; j <= high - 1; j++) {',
      '    // For ascending sort: arr[j] <= pivot',
      '    // For descending sort: arr[j] >= pivot',
      '    if (arr[j] <= pivot) { // Defaulting to ascending',
      '      i++;',
      '      swap(&arr[i], &arr[j]);',
      '    }',
      '  }',
      '  swap(&arr[i + 1], &arr[high]);',
      '  return (i + 1);',
      '}',
      '',
      'void quickSort(int arr[], int low, int high) {',
      '  if (low < high) {',
      '    int pi = partition(arr, low, high);',
      '    quickSort(arr, low, pi - 1);',
      '    quickSort(arr, pi + 1, high);',
      '  }',
      '}',
    ],
    cpp: [
      '#include <utility> // For std::swap',
      '',
      'int partition(int arr[], int low, int high) {',
      '  int pivot = arr[high];',
      '  int i = (low - 1);',
      '  for (int j = low; j <= high - 1; j++) {',
      '    // For ascending sort: arr[j] <= pivot',
      '    // For descending sort: arr[j] >= pivot',
      '    if (arr[j] <= pivot) {',
      '      i++;',
      '      std::swap(arr[i], arr[j]);',
      '    }',
      '  }',
      '  std::swap(arr[i + 1], arr[high]);',
      '  return (i + 1);',
      '}',
      '',
      'void quickSort(int arr[], int low, int high) {',
      '  if (low < high) {',
      '    int pi = partition(arr, low, high);',
      '    quickSort(arr, low, pi - 1);',
      '    quickSort(arr, pi + 1, high);',
      '  }',
      '}',
    ],
    python: [
      'def partition(arr, low, high):',
      '  pivot = arr[high]',
      '  i = low - 1',
      '  for j in range(low, high):',
      '    # For ascending sort: arr[j] <= pivot',
      '    # For descending sort: arr[j] >= pivot',
      '    if arr[j] <= pivot: # Defaulting to ascending',
      '      i += 1',
      '      arr[i], arr[j] = arr[j], arr[i]',
      '  arr[i + 1], arr[high] = arr[high], arr[i + 1]',
      '  return i + 1',
      '',
      'def quickSort(arr, low, high):',
      '  if low < high:',
      '    pi = partition(arr, low, high)',
      '    quickSort(arr, low, pi - 1)',
      '    quickSort(arr, pi + 1, high)',
    ],
  },
}
