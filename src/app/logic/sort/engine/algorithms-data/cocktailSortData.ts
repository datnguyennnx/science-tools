'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { cocktailSortGenerator } from '../algorithms'

export const cocktailSortData: SortAlgorithm = {
  id: 'cocktailSort',
  name: 'Cocktail Shaker Sort',
  description:
    'Cocktail Shaker Sort, also known as bidirectional bubble sort, is a variation of Bubble Sort that sorts in both directions on each pass. It improves on Bubble Sort by moving items to their correct position more quickly. In each pass, it first moves the largest elements to their correct position at the end of the array (like Bubble Sort), and then it moves the smallest elements to their correct position at the beginning of the array.',
  generator: cocktailSortGenerator,
  complexity: {
    time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' },
    space: 'O(1)',
  },
  origin: { name: 'Unknown (Variation of Bubble Sort)' },
  pseudoCodes: {
    plaintext: [
      'procedure cocktailShakerSort(list)',
      '  n = length of list',
      '  swapped = true',
      '  start = 0',
      '  end = n - 1',
      '  while swapped do',
      '    swapped = false',
      '    // Forward pass',
      '    for i = start to end - 1',
      '      if list[i] > list[i+1] then',
      '        swap(list[i], list[i+1])',
      '        swapped = true',
      '      end if',
      '    end for',
      '    if not swapped then',
      '      break',
      '    end if',
      '    swapped = false',
      '    end = end - 1',
      '    // Backward pass',
      '    for i = end - 1 down to start',
      '      if list[i] > list[i+1] then',
      '        swap(list[i], list[i+1])',
      '        swapped = true',
      '      end if',
      '    end for',
      '    start = start + 1',
      '  end while',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h> // Required for bool type',
      '',
      'void swap(int* a, int* b) {',
      '  int temp = *a;',
      '  *a = *b;',
      '  *b = temp;',
      '}',
      '',
      'void cocktailShakerSort(int arr[], int n) {',
      '  bool swapped = true;',
      '  int start = 0;',
      '  int end = n - 1;',
      '  while (swapped) {',
      '    swapped = false;',
      '    for (int i = start; i < end; ++i) {',
      '      if (arr[i] > arr[i + 1]) {',
      '        swap(&arr[i], &arr[i + 1]);',
      '        swapped = true;',
      '      }',
      '    }',
      '    if (!swapped)',
      '      break;',
      '    swapped = false;',
      '    --end;',
      '    for (int i = end - 1; i >= start; --i) {',
      '      if (arr[i] > arr[i + 1]) {',
      '        swap(&arr[i], &arr[i + 1]);',
      '        swapped = true;',
      '      }',
      '    }',
      '    ++start;',
      '  }',
      '}',
    ],
    cpp: [
      '#include <utility> // For std::swap',
      '',
      'void cocktailShakerSort(int arr[], int n) {',
      '  bool swapped = true;',
      '  int start = 0;',
      '  int end = n - 1;',
      '  while (swapped) {',
      '    swapped = false;',
      '    for (int i = start; i < end; ++i) {',
      '      if (arr[i] > arr[i + 1]) {',
      '        std::swap(arr[i], arr[i + 1]);',
      '        swapped = true;',
      '      }',
      '    }',
      '    if (!swapped)',
      '      break;',
      '    swapped = false;',
      '    --end;',
      '    for (int i = end - 1; i >= start; --i) {',
      '      if (arr[i] > arr[i + 1]) {',
      '        std::swap(arr[i], arr[i + 1]);',
      '        swapped = true;',
      '      }',
      '    }',
      '    ++start;',
      '  }',
      '}',
    ],
    python: [
      'def cocktailShakerSort(arr):',
      '  n = len(arr)',
      '  swapped = True',
      '  start = 0',
      '  end = n - 1',
      '  while swapped:',
      '    swapped = False',
      '    for i in range(start, end):',
      '      if arr[i] > arr[i + 1]:',
      '        arr[i], arr[i + 1] = arr[i + 1], arr[i]',
      '        swapped = True',
      '    if not swapped:',
      '      break',
      '    swapped = False',
      '    end -= 1',
      '    for i in range(end - 1, start - 1, -1):',
      '      if arr[i] > arr[i + 1]:',
      '        arr[i], arr[i + 1] = arr[i + 1], arr[i]',
      '        swapped = True',
      '    start += 1',
    ],
  },
  hasAdvancedAuxiliaryVisuals: false,
}
