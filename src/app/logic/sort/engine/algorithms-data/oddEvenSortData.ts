'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { oddEvenSortGenerator } from '../algorithms'

export const oddEvenSortData: SortAlgorithm = {
  id: 'oddEvenSort',
  name: 'Odd-Even Sort',
  description:
    'Odd-Even Sort, also known as brick sort, is a simple sorting algorithm that is a variation of Bubble Sort. It is primarily designed for use on parallel processors. The algorithm repeatedly performs two phases: an odd phase where odd-indexed pairs of adjacent elements are compared and swapped if out of order, and an even phase where even-indexed pairs are compared and swapped. This alternating comparison and swapping process continues until the list is sorted.',
  generator: oddEvenSortGenerator,
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'N. Habermann', year: 1972 },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure oddEvenSort(list, direction)',
      '  n = length of list',
      '  if n <= 1 then return list',
      '  isSorted = false',
      '  while not isSorted',
      '    isSorted = true',
      '    for i = 1 to n - 2 step 2',
      '      if (direction == ASC and list[i] > list[i + 1]) or (direction == DESC and list[i] < list[i + 1]) then',
      '        swap(list[i], list[i + 1])',
      '        isSorted = false',
      '      end if',
      '    end for',
      '    for i = 0 to n - 2 step 2',
      '      if (direction == ASC and list[i] > list[i + 1]) or (direction == DESC and list[i] < list[i + 1]) then',
      '        swap(list[i], list[i + 1])',
      '        isSorted = false',
      '      end if',
      '    end for',
      '  end while',
      '  return list',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '',
      'typedef enum { ASC, DESC } SortDirection;',
      '',
      'void swap(int *a, int *b) {',
      '    int temp = *a;',
      '    *a = *b;',
      '    *b = temp;',
      '}',
      '',
      'void oddEvenSort(int arr[], int n, SortDirection direction) {',
      '  if (n <= 1) return;',
      '  bool isSorted = false;',
      '  while (!isSorted) {',
      '    isSorted = true;',
      '    for (int i = 1; i <= n - 2; i = i + 2) {',
      '      bool conditionMet = false;',
      '      if (direction == ASC) {',
      '        if (arr[i] > arr[i + 1]) conditionMet = true;',
      '      } else {',
      '        if (arr[i] < arr[i + 1]) conditionMet = true;',
      '      }',
      '      if (conditionMet) {',
      '        swap(&arr[i], &arr[i + 1]);',
      '        isSorted = false;',
      '      }',
      '    }',
      '    for (int i = 0; i <= n - 2; i = i + 2) {',
      '      bool conditionMet = false;',
      '      if (direction == ASC) {',
      '        if (arr[i] > arr[i + 1]) conditionMet = true;',
      '      } else {',
      '        if (arr[i] < arr[i + 1]) conditionMet = true;',
      '      }',
      '      if (conditionMet) {',
      '        swap(&arr[i], &arr[i + 1]);',
      '        isSorted = false;',
      '      }',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <algorithm>',
      '',
      'enum class SortDirection { ASC, DESC };',
      '',
      'void oddEvenSort(std::vector<int>& arr, SortDirection direction) {',
      '  int n = arr.size();',
      '  if (n <= 1) return;',
      '  bool isSorted = false;',
      '  while (!isSorted) {',
      '    isSorted = true;',
      '    for (int i = 1; i <= n - 2; i = i + 2) {',
      '      bool conditionMet = false;',
      '      if (direction == SortDirection::ASC) {',
      '        if (arr[i] > arr[i + 1]) conditionMet = true;',
      '      } else {',
      '        if (arr[i] < arr[i + 1]) conditionMet = true;',
      '      }',
      '      if (conditionMet) {',
      '        std::swap(arr[i], arr[i + 1]);',
      '        isSorted = false;',
      '      }',
      '    }',
      '    for (int i = 0; i <= n - 2; i = i + 2) {',
      '      bool conditionMet = false;',
      '      if (direction == SortDirection::ASC) {',
      '        if (arr[i] > arr[i + 1]) conditionMet = true;',
      '      } else {',
      '        if (arr[i] < arr[i + 1]) conditionMet = true;',
      '      }',
      '      if (conditionMet) {',
      '        std::swap(arr[i], arr[i + 1]);',
      '        isSorted = false;',
      '      }',
      '    }',
      '  }',
      '}',
    ],
    python: [
      'def odd_even_sort(arr, direction="asc"):',
      '  n = len(arr)',
      '  if n <= 1:',
      '    return arr',
      '  is_sorted = False',
      '  while not is_sorted:',
      '    is_sorted = True',
      '    for i in range(1, n - 1, 2):',
      '      condition_met = False',
      '      if direction == "asc":',
      '        if arr[i] > arr[i + 1]:',
      '          condition_met = True',
      '      else:',
      '        if arr[i] < arr[i + 1]:',
      '          condition_met = True',
      '      if condition_met:',
      '        arr[i], arr[i + 1] = arr[i + 1], arr[i]',
      '        is_sorted = False',
      '    for i in range(0, n - 1, 2):',
      '      condition_met = False',
      '      if direction == "asc":',
      '        if arr[i] > arr[i + 1]:',
      '          condition_met = True',
      '      else:',
      '        if arr[i] < arr[i + 1]:',
      '          condition_met = True',
      '      if condition_met:',
      '        arr[i], arr[i + 1] = arr[i + 1], arr[i]',
      '        is_sorted = False',
      '  return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [10], cpp: [5], python: [0] },
    1: { c: [10], cpp: [6], python: [1] },
    2: { c: [11], cpp: [7], python: [2, 3] },
    3: { c: [12], cpp: [8], python: [4] },
    4: { c: [13], cpp: [9], python: [5] },
    5: { c: [14], cpp: [10], python: [6] },
    6: { c: [15], cpp: [11], python: [7] },
    7: { c: [16, 17, 18, 19, 20], cpp: [12, 13, 14, 15, 16], python: [9, 10, 11, 12, 13, 14] },
    8: { c: [22], cpp: [18], python: [16] },
    9: { c: [23], cpp: [19], python: [17] },
    10: { c: [24], cpp: [20], python: [17] },
    11: { c: [25], cpp: [21], python: [7] },
    12: { c: [26], cpp: [22], python: [18] },
    13: { c: [27, 28, 29, 30, 31], cpp: [23, 24, 25, 26, 27], python: [20, 21, 22, 23, 24, 25] },
    14: { c: [33], cpp: [29], python: [27] },
    15: { c: [34], cpp: [30], python: [28] },
    16: { c: [35], cpp: [31], python: [28] },
    17: { c: [36], cpp: [32], python: [18] },
    18: { c: [13], cpp: [9], python: [5] },
    19: { python: [30] },
    20: { c: [38], cpp: [34], python: [30] },
  },
  hasAdvancedAuxiliaryVisuals: false,
}
