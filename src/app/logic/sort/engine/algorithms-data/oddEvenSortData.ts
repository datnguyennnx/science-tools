'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { oddEvenSortGenerator } from '../algorithms'

export const oddEvenSortData: SortAlgorithm = {
  id: 'oddEvenSort',
  name: 'Odd-Even Sort',
  description:
    'Odd-Even Sort, also known as brick sort, is a simple sorting algorithm that is a variation of Bubble Sort. It is primarily designed for use on parallel processors. The algorithm repeatedly performs two phases: an odd phase where odd-indexed pairs of adjacent elements are compared and swapped if out of order, and an even phase where even-indexed pairs are compared and swapped. This alternating comparison and swapping process continues until the list is sorted.',
  generator: oddEvenSortGenerator,
  complexity: { time: { best: 'O(n)', average: 'O(n^2)', worst: 'O(n^2)' }, space: 'O(1)' },
  origin: { name: 'N. Habermann', year: 1972 },
  img: '',
  pseudoCodes: {
    plaintext: [
      'procedure oddEvenSort(list)',
      '  n = length of list',
      '  isSorted = false',
      '  while not isSorted',
      '    isSorted = true',
      '    // Odd phase',
      '    for i = 1 to n - 2 step 2',
      '      // For ascending sort: list[i] > list[i + 1]',
      '      // For descending sort: list[i] < list[i + 1]',
      '      if list[i] > list[i + 1] then // Defaulting to ascending sort logic',
      '        swap(list[i], list[i + 1])',
      '        isSorted = false',
      '      end if',
      '    end for',
      '    // Even phase',
      '    for i = 0 to n - 2 step 2',
      '      // For ascending sort: list[i] > list[i + 1]',
      '      // For descending sort: list[i] < list[i + 1]',
      '      if list[i] > list[i + 1] then // Defaulting to ascending sort logic',
      '        swap(list[i], list[i + 1])',
      '        isSorted = false',
      '      end if',
      '    end for',
      '  end while',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '',
      'void oddEvenSort(int arr[], int n) {',
      '  bool isSorted = false;',
      '  while (!isSorted) {',
      '    isSorted = true;',
      '    // Odd phase',
      '    for (int i = 1; i <= n - 2; i = i + 2) {',
      '      // For ascending sort: arr[i] > arr[i + 1]',
      '      // For descending sort: arr[i] < arr[i + 1]',
      '      if (arr[i] > arr[i + 1]) { // Defaulting to ascending',
      '        int temp = arr[i];',
      '        arr[i] = arr[i + 1];',
      '        arr[i + 1] = temp;',
      '        isSorted = false;',
      '      }',
      '    }',
      '    // Even phase',
      '    for (int i = 0; i <= n - 2; i = i + 2) {',
      '      // For ascending sort: arr[i] > arr[i + 1]',
      '      // For descending sort: arr[i] < arr[i + 1]',
      '      if (arr[i] > arr[i + 1]) { // Defaulting to ascending',
      '        int temp = arr[i];',
      '        arr[i] = arr[i + 1];',
      '        arr[i + 1] = temp;',
      '        isSorted = false;',
      '      }',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      '#include <algorithm> // For std::swap',
      '#include <stdbool.h> // C++ bool is built-in, included for consistency with C example or if other macros were used.',
      '',
      'void oddEvenSort(int arr[], int n) {',
      '  bool isSorted = false;',
      '  while (!isSorted) {',
      '    isSorted = true;',
      '    // Odd phase',
      '    for (int i = 1; i <= n - 2; i = i + 2) {',
      '      // For ascending sort: arr[i] > arr[i + 1]',
      '      // For descending sort: arr[i] < arr[i + 1]',
      '      if (arr[i] > arr[i + 1]) { // Defaulting to ascending',
      '        std::swap(arr[i], arr[i + 1]);',
      '        isSorted = false;',
      '      }',
      '    }',
      '    // Even phase',
      '    for (int i = 0; i <= n - 2; i = i + 2) {',
      '      // For ascending sort: arr[i] > arr[i + 1]',
      '      // For descending sort: arr[i] < arr[i + 1]',
      '      if (arr[i] > arr[i + 1]) { // Defaulting to ascending',
      '        std::swap(arr[i], arr[i + 1]);',
      '        isSorted = false;',
      '      }',
      '    }',
      '  }',
      '}',
    ],
    python: [
      'def odd_even_sort(arr):',
      '    n = len(arr)',
      '    is_sorted = False',
      '    while not is_sorted:',
      '        is_sorted = True',
      '        # Odd phase',
      '        for i in range(1, n - 1, 2):',
      '            # For ascending sort: arr[i] > arr[i + 1]',
      '            # For descending sort: arr[i] < arr[i + 1]',
      '            if arr[i] > arr[i + 1]: # Defaulting to ascending',
      '                arr[i], arr[i + 1] = arr[i + 1], arr[i]',
      '                is_sorted = False',
      '        # Even phase',
      '        for i in range(0, n - 1, 2):',
      '            # For ascending sort: arr[i] > arr[i + 1]',
      '            # For descending sort: arr[i] < arr[i + 1]',
      '            if arr[i] > arr[i + 1]: # Defaulting to ascending',
      '                arr[i], arr[i + 1] = arr[i + 1], arr[i]',
      '                is_sorted = False',
      '    return arr',
    ],
  },
}
