'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { shellSortGenerator } from '../algorithms'

export const shellSortData: SortAlgorithm = {
  id: 'shellSort',
  name: 'Shell Sort',
  description:
    'Proposed by Donald L. Shell in 1959, Shell Sort is an optimization of Insertion Sort. It improves performance by allowing the comparison and swapping of elements that are far apart, thus quickly moving elements to their general vicinity. It works by sorting elements at decreasing intervals (gaps), with the final pass being a standard Insertion Sort with a gap of 1. This pre-sorting with larger gaps significantly reduces the number of shifts required in the final insertion sort step.',
  generator: shellSortGenerator,
  complexity: {
    time: {
      best: 'O(n log n)',
      average: 'Varies with gap sequence (e.g., O(n log\u00b2 n) to O(n^(3/2)))',
      worst: 'O(n^2)',
    },
    space: 'O(1)',
  },
  origin: { name: 'Donald L. Shell', year: 1959 },
  img: 'https://upload.wikimedia.org/wikipedia/commons/0/05/DonShell-1.jpg',
  pseudoCodes: {
    plaintext: [
      'procedure shellSort(list)',
      '  n = length of list',
      '  gap = n / 2',
      '  while gap > 0',
      '    for i = gap to n - 1',
      '      temp = list[i]',
      '      j = i',
      '      // For ascending sort: list[j - gap] > temp',
      '      // For descending sort: list[j - gap] < temp',
      '      while j >= gap and list[j - gap] > temp // Defaulting to ascending',
      '        list[j] = list[j - gap]',
      '        j = j - gap',
      '      end while',
      '      list[j] = temp',
      '    end for',
      '    gap = gap / 2',
      '  end while',
      'end procedure',
    ],
    c: [
      'void shellSort(int arr[], int n) {',
      '  for (int gap = n / 2; gap > 0; gap /= 2) {',
      '    for (int i = gap; i < n; i += 1) {',
      '      int temp = arr[i];',
      '      int j;',
      '      // For ascending sort: arr[j - gap] > temp',
      '      // For descending sort: arr[j - gap] < temp',
      '      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) { // Defaulting to ascending',
      '        arr[j] = arr[j - gap];',
      '      }',
      '      arr[j] = temp;',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      'void shellSort(int arr[], int n) {',
      '  for (int gap = n / 2; gap > 0; gap /= 2) {',
      '    for (int i = gap; i < n; i++) {',
      '      int temp = arr[i];',
      '      int j;',
      '      // For ascending sort: arr[j - gap] > temp',
      '      // For descending sort: arr[j - gap] < temp',
      '      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) { // Defaulting to ascending',
      '        arr[j] = arr[j - gap];',
      '      }',
      '      arr[j] = temp;',
      '    }',
      '  }',
      '}',
    ],
    python: [
      'def shellSort(arr):',
      '  n = len(arr)',
      '  gap = n // 2',
      '  while gap > 0:',
      '    for i in range(gap, n):',
      '      temp = arr[i]',
      '      j = i',
      '      # For ascending sort: arr[j - gap] > temp',
      '      # For descending sort: arr[j - gap] < temp',
      '      while j >= gap and arr[j - gap] > temp: # Defaulting to ascending',
      '        arr[j] = arr[j - gap]',
      '        j -= gap',
      '      arr[j] = temp',
      '    gap //= 2',
    ],
  },
}
