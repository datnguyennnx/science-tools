'use client'

import type { SortAlgorithm } from '../algorithmRegistry'
import { shellSortGenerator } from '../algorithms'

export const shellSortData: SortAlgorithm = {
  id: 'shellSort',
  name: 'Shell Sort',
  description:
    'Proposed by Donald L. Shell in 1959, Shell Sort is an optimization of Insertion Sort. It improves performance by allowing the comparison and swapping of elements that are far apart, thus quickly moving elements to their general vicinity. It works by sorting elements at decreasing intervals (gaps), with the final pass being a standard Insertion Sort with a gap of 1. This pre-sorting with larger gaps significantly reduces the number of shifts required in the final insertion sort step.',
  generator: shellSortGenerator,
  complexity: {
    time: {
      best: 'O(n log n)',
      average: 'Varies with gap sequence (e.g., O(n log\u00b2 n) to O(n^(3/2)))',
      worst: 'O(n^2)',
    },
    space: 'O(1)',
  },
  origin: { name: 'Donald L. Shell', year: 1959 },
  img: 'https://upload.wikimedia.org/wikipedia/commons/0/05/DonShell-1.jpg',
  pseudoCodes: {
    plaintext: [
      'procedure shellSort(list, direction)',
      '  n = length of list',
      '  gap = n / 2',
      '  while gap > 0',
      '    for i = gap to n - 1',
      '      temp = list[i]',
      '      j = i',
      '      while j >= gap and ((direction == ASC and list[j - gap] > temp) or (direction == DESC and list[j - gap] < temp))',
      '        list[j] = list[j - gap]',
      '        j = j - gap',
      '      end while',
      '      list[j] = temp',
      '    end for',
      '    gap = gap / 2',
      '  end while',
      'end procedure',
    ],
    c: [
      '#include <stdbool.h>',
      '',
      '// arr: array to be sorted',
      '// n: size of the array',
      '// ascending: true for ascending, false for descending',
      'void shellSort(int arr[], int n, bool ascending) {',
      '  if (n <= 1) return;',
      '  for (int gap = n / 2; gap > 0; gap /= 2) {',
      '    for (int i = gap; i < n; i += 1) {',
      '      int temp = arr[i];',
      '      int j = i;',
      '      if (ascending) {',
      '        // For Shell sort, the inner loop condition arr[j-gap] > temp is for finding the correct spot for temp.',
      '        // So, if ascending, we move elements while arr[j-gap] is greater than temp.',
      '        while (j >= gap && arr[j - gap] > temp) {',
      '          arr[j] = arr[j - gap];',
      '          j -= gap;',
      '        }',
      '      } else {',
      '        // If descending, we move elements while arr[j-gap] is less than temp.',
      '        while (j >= gap && arr[j - gap] < temp) {',
      '          arr[j] = arr[j - gap];',
      '          j -= gap;',
      '        }',
      '      }',
      '      arr[j] = temp;',
      '    }',
      '  }',
      '}',
    ],
    cpp: [
      '#include <vector>',
      '#include <stdbool.h>',
      '',
      '// arr: array or vector to be sorted',
      '// n: size of the array (if raw array is used, or pass arr.size() for vector)',
      '// ascending: true for ascending, false for descending',
      'template <typename T>',
      'void shellSort(T& arr, int n, bool ascending) {',
      '  if (n <= 1) return;',
      '  for (int gap = n / 2; gap > 0; gap /= 2) {',
      '    for (int i = gap; i < n; i++) {',
      '      int temp = arr[i];',
      '      int j = i;',
      '      if (ascending) {',
      '        while (j >= gap && arr[j - gap] > temp) {',
      '          arr[j] = arr[j - gap];',
      '          j -= gap;',
      '        }',
      '      } else {',
      '        while (j >= gap && arr[j - gap] < temp) {',
      '          arr[j] = arr[j - gap];',
      '          j -= gap;',
      '        }',
      '      }',
      '      arr[j] = temp;',
      '    }',
      '  }',
      '}',
    ],
    python: [
      'def shell_sort(arr, ascending=True):',
      '  n = len(arr)',
      '  if n <= 1:',
      '    return arr',
      '  gap = n // 2',
      '  while gap > 0:',
      '    for i in range(gap, n):',
      '      temp = arr[i]',
      '      j = i',
      '      if ascending:',
      '        while j >= gap and arr[j - gap] > temp:',
      '          arr[j] = arr[j - gap]',
      '          j -= gap',
      '      else:',
      '        while j >= gap and arr[j - gap] < temp:',
      '          arr[j] = arr[j - gap]',
      '          j -= gap',
      '      arr[j] = temp',
      '    gap //= 2',
      '  return arr',
    ],
  },
  pseudoCodeMapping: {
    0: { c: [5], cpp: [7], python: [0] },
    1: { c: [5], cpp: [7], python: [1] },
    2: { c: [7], cpp: [9], python: [4] },
    3: { c: [7], cpp: [9], python: [5] },
    4: { c: [8], cpp: [10], python: [6] },
    5: { c: [9], cpp: [11], python: [7] },
    6: { c: [10], cpp: [12], python: [8] },
    7: { c: [14, 20], cpp: [14, 19], python: [10, 14] },
    8: { c: [15, 21], cpp: [15, 20], python: [11, 15] },
    9: { c: [16, 22], cpp: [16, 21], python: [12, 16] },
    10: { c: [14, 20], cpp: [14, 19], python: [10, 14] },
    11: { c: [25], cpp: [24], python: [17] },
    12: { c: [8], cpp: [10], python: [6] },
    13: { c: [7], cpp: [9], python: [18] },
    14: { c: [7], cpp: [9], python: [5] },
    15: { c: [28], cpp: [27], python: [19] },
  },
  hasAdvancedAuxiliaryVisuals: false,
}
